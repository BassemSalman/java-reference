Brute Force Algorithms: 
This technique is used when you want to solve a problem by systematically trying
all possible solutions. For example, you can use a brute force algorithm to find the maximum or minimum value in an unsorted array.

Greedy Algorithms: Greedy algorithms make locally optimal choices at each step
 with the hope of finding a global optimum. An example use case is the "Coin Change" 
 problem, where you want to find the minimum number of coins needed to make a certain
 amount of change.

Divide and Conquer Algorithms: This technique involves breaking a problem into smaller 
subproblems, solving them independently, and combining their solutions to obtain the final result.
An example is the "Merge Sort" algorithm that recursively divides an array into smaller subarrays, sorts them, and merges them back together.

Two Pointers Technique: This technique involves using two pointers to traverse an array or a 
sequence simultaneously. It is often used for problems that involve searching for pairs or 
subarrays with specific properties. For example, you can use two pointers to find if a given 
array is a palindrome.

Fast and Slow Pointers Technique: This technique is commonly used for linked list problems.
 It involves using two pointers that move at different speeds to traverse the list. 
 It can be used, for instance, to determine if a linked list has a cycle.

Merge Intervals Technique: This technique is used to merge overlapping intervals or intervals 
with similar properties. An example use case is the "Merge Intervals" problem, where you are
given a collection of intervals and need to merge overlapping ones.

Sliding Window Technique: This technique is useful for solving problems that involve finding a 
substring, subarray, or any contiguous sequence that satisfies certain constraints. It involves
 maintaining a window of elements and sliding it through the input. An example use case is finding
  the longest substring with k distinct characters.

Cyclic Sort Technique: Cyclic sort is used when you have an array of numbers in a specific 
range and want to sort them. It works by placing each number in its correct position within a 
cyclic loop. It is an efficient sorting technique for certain scenarios.

Subsets Technique: This technique is used to generate all possible subsets of a given set or
 array. It is commonly used in combination with backtracking algorithms or recursion.
  For example, you can use subsets to solve problems like generating all possible combinations 
  or permutations.

Topological Sort: Topological sorting is used to order the nodes of a directed graph such that
 for every directed edge from node A to node B, A comes before B in the ordering. It is commonly 
 used in tasks such as task scheduling or dependency resolution.

Top K Elements Technique: This technique involves finding the top K elements from a collection
 of elements. It is often used with priority queues or heaps to efficiently find the largest or 
 smallest K elements. For example, you can use this technique to find the K largest elements in
  an array.

Min Heaps and Max Heaps Technique: Heaps are tree-like data structures that satisfy the heap
 property (either min heap or max heap). They are often used in priority queues or for efficient
  management of elements with priority. They can be used for tasks such as finding the median
   of a stream of numbers or efficiently sorting elements.